package com.aditi.dripyard.controller;

import com.aditi.dripyard.domain.OrderStatus;
import com.aditi.dripyard.exception.OrderException;
import com.aditi.dripyard.exception.ProductException;
import com.aditi.dripyard.exception.ReviewNotFoundException;
import com.aditi.dripyard.exception.UserException;
import com.aditi.dripyard.model.Order;
import com.aditi.dripyard.model.Product;
import com.aditi.dripyard.model.Review;
import com.aditi.dripyard.model.User;
import com.aditi.dripyard.request.AddImageRequest;
import com.aditi.dripyard.request.CreateProductRequest;
import com.aditi.dripyard.request.RemoveImageRequest;
import com.aditi.dripyard.response.ApiResponse;
import com.aditi.dripyard.service.OrderService;
import com.aditi.dripyard.service.ProductService;
import com.aditi.dripyard.service.ReviewService;
import com.aditi.dripyard.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
public class AdminController {

    private final ProductService productService;
    private final UserService userService;
    private final OrderService orderService;
    private final ReviewService reviewService;

    @PostMapping("/products")
    public ResponseEntity<Product> createProduct(@RequestBody CreateProductRequest req, @RequestHeader("Authorization") String jwt) throws UserException, ProductException {
        User admin = userService.findUserProfileByJwt(jwt);
        Product product = productService.createProduct(req, admin);
        return new ResponseEntity<>(product, HttpStatus.CREATED);
    }

    @GetMapping("/products")
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productService.getAllProducts();
        return new ResponseEntity<>(products, HttpStatus.OK);
    }

    @DeleteMapping("/products/{productId}")
    public ResponseEntity<ApiResponse> deleteProduct(@PathVariable Long productId) throws ProductException {
        productService.deleteProduct(productId);
        ApiResponse res = new ApiResponse("Product Deleted Successfully", true);
        return new ResponseEntity<>(res, HttpStatus.OK);
    }

    @PostMapping("/products/add-image")
    public ResponseEntity<ApiResponse> addImageToProduct(@RequestBody AddImageRequest request, @RequestHeader("Authorization") String jwt) throws UserException, ProductException {
        User admin = userService.findUserProfileByJwt(jwt);
        productService.addImageToProduct(request.getProductId(), request.getImageKey());
        ApiResponse res = new ApiResponse("Image added to product successfully", true);
        return new ResponseEntity<>(res, HttpStatus.OK);
    }

    @PostMapping("/products/remove-image")
    public ResponseEntity<ApiResponse> removeImageFromProduct(@RequestBody RemoveImageRequest request, @RequestHeader("Authorization") String jwt) throws UserException, ProductException {
        User admin = userService.findUserProfileByJwt(jwt);
        productService.removeImageFromProduct(request.getProductId(), request.getImageKey());
        ApiResponse res = new ApiResponse("Image removed from product successfully", true);
        return new ResponseEntity<>(res, HttpStatus.OK);
    }

    @GetMapping("/orders")
    public ResponseEntity<List<Order>> getAllOrders() {
        List<Order> orders = orderService.getAllOrders();
        return new ResponseEntity<>(orders, HttpStatus.OK);
    }

    @PatchMapping("/orders/{orderId}/status")
    public ResponseEntity<Order> updateOrderStatus(@PathVariable Long orderId, @RequestParam OrderStatus status) throws OrderException {
        Order order = orderService.updateOrderStatus(orderId, status);
        return new ResponseEntity<>(order, HttpStatus.OK);
    }

    @GetMapping("/users")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return new ResponseEntity<>(users, HttpStatus.OK);
    }

    @DeleteMapping("/users/{userId}")
    public ResponseEntity<ApiResponse> deleteUser(@PathVariable Long userId) throws UserException {
        userService.deleteUser(userId);
        ApiResponse res = new ApiResponse("User Deleted Successfully", true);
        return new ResponseEntity<>(res, HttpStatus.OK);
    }


    @GetMapping("/reviews")
    public ResponseEntity<List<Review>> getAllReviews() {
        List<Review> reviews = reviewService.getAllReviews();
        return new ResponseEntity<>(reviews, HttpStatus.OK);
    }

    @DeleteMapping("/reviews/{reviewId}")
    public ResponseEntity<ApiResponse> deleteReview(@PathVariable Long reviewId) throws ReviewNotFoundException {
        reviewService.deleteReviewByAdmin(reviewId);
        ApiResponse res = new ApiResponse("Review Deleted Successfully", true);
        return new ResponseEntity<>(res, HttpStatus.OK);
    }
}
